//This project
#include "LinealSpectra.h"
#include "Spectra_For_Erik.h"
#include "Utilities.h"

#include <iostream>
#include <fstream>
#include <algorithm>

namespace utils = Utilities; //namespace alias


std::vector<std::pair<std::string,TH1D>> ErikSpectra::GetMonoenergeticLinealSpectra()
{
	/*
	Retrieves the lineal energy spectra for 0.1 MeV - 79 MeV monoenergetic protons.
	These energies correspond to the bins in Fada's KE spectrum
	*/

	//Hardcoded path and target size
	std::string fyFolder = "/home/joseph/Dropbox/Documents/Work/PHD_local/December2023_5um_logarithmic";
	std::string targetSize = "1e3"; //1 um diameter target spheres	

	//Have to make a dictionary so that CERN ROOT can properly load and save STD library types from files
	gInterpreter->GenerateDictionary("pair<string,TH1F>;vector<pair<string,TH1F> >", "TH1.h;string;utility;vector");

	std::vector<std::pair<std::string, TH1D>> monoenergeticSpectra; //List to hold our d(y) spectrum
	TH1D monoSpectrum; //Output histogram

	fyFolder = fyFolder + "/" + targetSize + "nm"; 

	for (const auto &entry : std::filesystem::directory_iterator(fyFolder)) //Loop over all the files in the folder
	{
		TFile f = TFile((TString)entry.path());
		monoSpectrum = std::move(*(TH1D*)f.Get("Lineal energy histogram")); //Move the value pointed to by the TH1D pointer on to the stack
		Utilities::PMF_to_FrequencyFunction(&monoSpectrum); //Transform the N(y) to a d(y)

		std::string energy = Utilities::GetFileEnergy(entry.path().filename()); //Get the energy of the file

		monoenergeticSpectra.push_back(std::pair<std::string,TH1D>(energy,monoSpectrum));
	}

	return monoenergeticSpectra;
}

void ErikSpectra::PlotMonoenergeticLinealSpectra(const std::vector<std::pair<std::string,TH1D>>& monoenergeticSpectra)
{
	gStyle->SetOptStat(0); //Don't print the stats window in the top right
	TCanvas* c = new TCanvas("c","c");
	c->SetCanvasSize(2040, 1640);
	c->SetWindowSize(2040, 1640);
	c->SetLeftMargin(0.15);
	c->SetBottomMargin(0.15);

	//Now let's iterate through our lineal energy library, plot, and do all that nice stuff
	for (const auto& linealSpectra:monoenergeticSpectra)
	{
		//Get the spectrum and multiply it by y, for semilog plotting
		TH1D spectra = std::get<1>(linealSpectra);
		utils::Prepare_for_Semilog(&spectra);

		//Parse the output name
		double energy = std::stod(std::get<0>(linealSpectra));
		std::stringstream nameStream;
		nameStream << std::fixed << std::setprecision(8) << energy;
		std::string outputName = "/home/joseph/Dropbox/Documents/Work/Projects/MDA_vitro_RBE/Images/SpectraForErik_April2024/" + nameStream.str() + "MeV.jpg";

		//Set axes
		spectra.SetTitle("");
		spectra.GetYaxis()->SetTitle("y #upoint f(y)");
		spectra.GetXaxis()->SetTitle("y [#frac{keV}{#mum}]");
		spectra.GetXaxis()->CenterTitle(true);
		spectra.GetYaxis()->CenterTitle(true);
		spectra.GetXaxis()->SetTitleFont(42);
		spectra.GetYaxis()->SetTitleFont(42);
		spectra.GetXaxis()->SetTitleSize(0.042);
		spectra.GetYaxis()->SetTitleSize(0.048);
		spectra.GetXaxis()->SetTitleOffset(1.50); //Offset x axis so no overlap
		gPad->SetLogx();

		//Set histogram fill
		spectra.SetFillColorAlpha(kAzure+3, 0.5);
		spectra.SetLineColor(kBlack);
		spectra.SetLineWidth(2);
		spectra.SetLineStyle(1);

		//Draw the histogram
		spectra.Draw("HIST");

		//Draw the inline title
		TLatex *t = new TLatex(0.015, 0.935, (TString)(nameStream.str() + " MeV"));
		t->SetNDC(); //set position in coordinate system relative to canvas
		t->Draw();

		//Save
		c->SaveAs((TString)outputName);

		delete t; //Don't want to leak memory
	}
	delete c;
}

bool sortByFirst(const std::pair<double,TH1D> &a, const std::pair<double,TH1D> &b)
{
	return (a.first < b.first);
}


void PrintFile(std::string fileName, double energy, int counter, TH1D& histogram)
{
	std::ofstream myfile;
	myfile.open (fileName);
	myfile << "!! Lineal energy frequency spectrum, f(y), for use in RayStation 2023B-IonPG \n";
	myfile << "!! Date 2024-04-12 (yyyy/mm/dd) \n \n";
	myfile << "!! Data source \n";
	myfile << "Data provided by Joseph M DeCunha. \n \n";
	myfile << "!! Comment \n";
	myfile << "Computed by SuperTrack version 1.0 (https://github.com/jdecunha/supertrack). Tracks generated by MicroTrackGenerator version 1.0 (https://github.com/JDecunha/MicroTrackGenerator) using the Geant4-DNA Option 2 physics list in Geant4 version 11.0. \n \n";
	myfile << "!! Version of format \nVersion 0.01 \n \n";
	myfile << "!! Modality\nModality PROTON\n\n";
	myfile << "!! Energy binning\n0.001 300 300\n\n";
	myfile << "!! EnergyId					Energy for this id =		" << energy << "\n";
	myfile << std::to_string(counter) << "\n";
	std::string fileNameJustName = "LinealEnergySpectrum_PROTON_" + std::to_string(counter) + ".les";
	myfile << fileNameJustName << "\n\n";

	int NumBins = histogram.GetNbinsX();
	double lower = histogram.GetBinLowEdge(1);
	double upperLowEdge = histogram.GetBinLowEdge((NumBins));
	double upper = upperLowEdge+histogram.GetBinWidth((NumBins));

	myfile << "!! Lineal energy binning \n" << lower << " " << upper << " " << NumBins << "\n";

	double integratedValue = 0;

	for (int i = 1; i <= NumBins; i++) 
	{
		auto value = histogram.GetBinContent(i);
		auto binWidth = histogram.GetBinWidth(i);
		myfile << value << "\n";
		integratedValue += value*binWidth;

	}
	std::cout << std::fixed << std::setprecision(6) << integratedValue << std::endl;
	myfile.close();
}

void ErikSpectra::PrintLESSpectra(const std::vector<std::pair<std::string,TH1D>>& monoenergeticSpectra)
{
	//Step 1.) I want to make a new vector of pairs and sort them
	std::vector<std::pair<double,TH1D>> monoenergeticSpectraDouble;



	for (const auto& linealSpectra:monoenergeticSpectra)
	{
		monoenergeticSpectraDouble.push_back(std::pair<double,TH1D>(std::stod(std::get<0>(linealSpectra)),std::get<1>(linealSpectra)));
	}

	std::sort(monoenergeticSpectraDouble.begin(), monoenergeticSpectraDouble.end(),sortByFirst);

	int counter = 0;

	for (const auto& linealSpectra:monoenergeticSpectraDouble)
	{
		//Get the spectrum
		TH1D spectra = std::get<1>(linealSpectra);

		//Parse the output name
		double energy = std::get<0>(linealSpectra);
		std::stringstream nameStream;
		nameStream << std::fixed << std::setprecision(8) << energy;
		std::string outputName = "/home/joseph/Dropbox/Documents/Work/Projects/MDA_vitro_RBE/Images/SpectraForErik_April2024/LinealEnergySpectrum_PROTON_" + std::to_string(counter) + ".les";


		PrintFile(outputName, std::get<0>(linealSpectra), counter, spectra);

		counter++;		
	}

}